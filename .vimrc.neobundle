"------------------------------------------------------------
" NeoBundle
"------------------------------------------------------------
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
    call neobundle#begin(expand('~/.vim/bundle/'))
    NeoBundleFetch 'Shougo/neobundle.vim'
    call neobundle#end()
endif


"------------------------------------------------------------
" ファイル操作・ファイル検索 (ほぼunite系)
"------------------------------------------------------------

" ゆないとfamily
"  ,ff : ファイル一覧
"  ,fb : バッファ一覧
"  ,fr : レジスタ一覧
"  ,fm : 最近使ったファイル
"  ,fc : ブックマーク参照
"  ,fa : ブックマーク追加
"  ,fg : perlのグローバルモジュール一覧
"  ,fl : perlのローカルモジュール一覧
NeoBundle 'unite.vim'
nnoremap [unite] <Nop>
nmap ,f [unite]
let g:unite_enable_start_insert = 0              " 起動時はノーマルモード
let g:unite_source_file_mru_limit = 50           " 最近開いたファイル
let g:unite_source_file_mru_filename_format = '' " 表示スピード高速化
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>
"  for perl module
NeoBundle 'y-uuki/unite-perl-module.vim'
nnoremap <silent> [unite]g :<C-u>Unite perl/global<CR>
nnoremap <silent> [unite]l :<C-u>Unite perl/local<CR>
" :Unite colorscheme : カラースキームの動作確認
NeoBundle 'ujihisa/unite-colorscheme'

" vim起動時に最近開いたファイルとか表示
NeoBundle 'mhinz/vim-startify'
let g:startify_custom_header =
            \ map(['Vim '.v:version]+split(system('date'), '\n'), '"   ". v:val')+ ['','']
let g:startify_custom_indices = [
            \ 'a', 'c', 'd', 'f', 'g', 'h', 'l', 'm', 'n', 'o', 'p', 'r', 'u', 'w', 'x',
            \ 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
            \ 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
            \  ]
let g:startify_bookmarks = ['~/.vimrc', '~/.bashrc', '~/.gitconfig', ',~/.tmux.conf',]

" :Ack : ack検索ができる
NeoBundle 'mileszs/ack.vim'

" C-e : ディレクトリをツリー表示
NeoBundle 'scrooloose/nerdtree'
let      NERDTreeShowHidden = 1
nnoremap <silent><C-e> :NERDTreeToggle<CR>


"------------------------------------------------------------
" カーソル移動・スクロール
"------------------------------------------------------------

" 楽々カーソル移動
"  <Space>k : 上行移動
"  <Space>j : 下行移動
"  <Space>w : 前方単語移動
"  <Space>b : 後方単語移動
"  <Space>s : 1文字検索
NeoBundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
let g:EasyMotion_leader_key="<Space>"
let g:EasyMotion_grouping=1
hi  EasyMotionTarget ctermbg=none ctermfg=red
hi  EasyMotionShade  ctermbg=none ctermfg=blue

" %による対応括弧へのジャンプ機能を拡張
NeoBundle 'tmhedberg/matchit'


"------------------------------------------------------------
" オートコンプリート
"------------------------------------------------------------

" 定番の
"  C-g  : 前回行われた補完をキャンセル
"  C-l  : 補完候補のなかから共通する部分を補完。シェルの補完のような動き
"  C-h  : ポップアップを閉じる
"  <BS> : ポップアップを閉じる
"  C-y  : 選択している候補を確定する
"  C-e  : 選択している候補をキャンセルして閉じる
NeoBundle 'Shougo/neocomplcache'
let g:acp_enableAtStartup=0                      " (インストールされているのなら)AutoComplPopを無効化
let g:neocomplcache_enable_at_startup=1          " vim起動時に有効化
let g:neocomplcache_enable_smart_case=1          " 大文字、小文字を区別しない
let g:neocomplcache_enable_underbar_completion=1 " アンダースコア区切りの補完
inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-l> neocomplcache#complete_common_string()
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplcache#close_popup()
inoremap <expr><C-e> neocomplcache#cancel_popup()
"  omni補完
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType php           setlocal omnifunc=phpcomplete#CompletePHP
autocmd FileType perl          setlocal omnifunc=perlcomplete#CompletePERL
autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
autocmd FileType c             setlocal omnifunc=ccomplete#Complete


"------------------------------------------------------------
" colorscheme
"------------------------------------------------------------
NeoBundle 'vim-scripts/Colour-Sampler-Pack'


"------------------------------------------------------------
" その他の精鋭たち
"------------------------------------------------------------

" \rでプログラム実行できる
NeoBundle 'quickrun.vim'

" (normal/visual) gcc : コメントアウト
NeoBundle 'tComment'

" 変更差分を可視化
NeoBundle 'airblade/vim-gitgutter'
nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>

" 違うスクリーンでコピペができるよ
"  sy : yanc
"  sp : paste
NeoBundle 'yanktmp.vim'
map <silent> sy :call YanktmpYank()<CR>
map <silent> sp :call YanktmpPaste_p()<CR>
map <silent> sP :call YanktmpPaste_P()<CR>

" 選択範囲を('*'や'#'で)検索
NeoBundle 'thinca/vim-visualstar'

" vimの非同期実行に必要。多くのプラグインが依存しているのでとりあえず。
" バージョンアップのたびにmakeする必要があるのでこんな書き方になってる。
NeoBundle 'Shougo/vimproc.vim', {
    \ 'build' : {
    \     'windows' : 'tools\\update-dll-mingw',
    \     'cygwin' : 'make -f make_cygwin.mak',
    \     'mac' : 'make -f make_mac.mak',
    \     'linux' : 'make',
    \     'unix' : 'gmake',
    \    },
    \ }


"------------------------------------------------------------
" 補欠メンバー
"------------------------------------------------------------

" 囲み文字の入力補助
"  囲み文字の削除:ds (delete surround)
"  囲み文字の変更:cs (change surrount)
NeoBundle 'surround.vim'

" スニペット補完
NeoBundle 'msanders/snipmate.vim'

" Align : 整形・桁揃え
" 位置を選択後 :\t=
NeoBundle 'vim-scripts/Align'
let g:Align_xstrlen = 3 " 日本語対応

